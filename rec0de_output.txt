=== ./install.sh ===
#!/bin/bash

INSTALL_DIR="$HOME/.local/bin"
TARGET="$INSTALL_DIR/rec0de"

mkdir -p "$INSTALL_DIR"
cp rec0de.sh "$TARGET"
chmod +x "$TARGET"

SHELL_RC="$HOME/.bashrc"
if [[ "$SHELL" == */zsh ]]; then
  SHELL_RC="$HOME/.zshrc"
fi

if ! grep -q 'alias rec0de=' "$SHELL_RC"; then
  echo "alias rec0de='$TARGET'" >> "$SHELL_RC"
  echo "‚úÖ Alias 'rec0de' added to $SHELL_RC"
else
  echo "‚ÑπÔ∏è Alias 'rec0de' already exists in $SHELL_RC"
fi

echo "üì¶ Installed to $TARGET"
echo "üîÑ Run 'source $SHELL_RC' or restart your terminal"



=== ./rec0de.sh ===
#!/bin/bash

IGNORE_FILE=""
OUTPUT_FILE="rec0de_output.txt"
ENTRY_POINT="."
MAX_DEPTH=5
EXTENSIONS=("py" "json")

while [[ $# -gt 0 ]]; do
  key="$1"
  case $key in
    --ignore)
      IGNORE_FILE="$2"
      shift; shift
      ;;
    --out)
      OUTPUT_FILE="$2"
      shift; shift
      ;;
    --entry)
      ENTRY_POINT="$2"
      shift; shift
      ;;
    --level)
      MAX_DEPTH="$2"
      shift; shift
      ;;
    --ext)
      IFS=',' read -ra EXTENSIONS <<< "$2"
      shift; shift
      ;;
    *)
      echo "Unknown option: $1"
      exit 1
      ;;
  esac
done

if ! command -v rg &> /dev/null; then
  echo "ripgrep (rg) is required. Please install it."
  exit 1
fi

EXT_FILTER_REGEX=""
for ext in "${EXTENSIONS[@]}"; do
  EXT_FILTER_REGEX+="\\.${ext}\$|"
done
EXT_FILTER_REGEX="${EXT_FILTER_REGEX%|}"

IGNORE_OPTS=()
if [[ -n "$IGNORE_FILE" ]]; then
  IGNORE_OPTS+=(--ignore-file "$IGNORE_FILE")
fi

echo "üîç Scanning: $ENTRY_POINT (depth=$MAX_DEPTH)"
echo "üìÅ Ignore file: ${IGNORE_FILE:-none}"
echo "üìÑ Output: $OUTPUT_FILE"
echo "üîé Extensions: ${EXTENSIONS[*]}"

> "$OUTPUT_FILE"  # clear output

if [[ -f "$ENTRY_POINT" ]]; then
  FILES=("$ENTRY_POINT")
elif [[ -d "$ENTRY_POINT" ]]; then
  mapfile -t FILES < <(rg --files "$ENTRY_POINT" \
    --maxdepth "$MAX_DEPTH" \
    "${IGNORE_OPTS[@]}" | rg "$EXT_FILTER_REGEX")
else
  echo "‚ùå Invalid entry point: $ENTRY_POINT"
  exit 1
fi

for file in "${FILES[@]}"; do
  echo "=== $file ===" >> "$OUTPUT_FILE"
  cat "$file" >> "$OUTPUT_FILE"
  echo -e "\n\n" >> "$OUTPUT_FILE"
done

echo "‚úÖ Done. Results saved to $OUTPUT_FILE"



